[comment encoding = UTF-8 /]
[module dto('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainDTOs(c : Class, path : String)]
[let dtoPath : String = path.concat('dtos/')]
    [c.genMinimumDTO(dtoPath)/]
    [c.genBasicDTO(dtoPath)/]
[/let]
[/template]

[template protected genMinimumDTO(c : Class, path: String) {className : String = c.getMinimumDTOName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].dtos;

import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;


@XmlRootElement
public class [className/] [if(c.isGeneralization())] extends [c.getGeneralizationClass().getMinimumDTOName()/][/if] implements Serializable{


[if(c.isGeneralization())]
[for( p : Property | c.excludeAttributes(c.getGeneralizationClass()))]
private [p.type.name/] [p.name/];
[/for]
[/if]

[if(not c.isGeneralization())]
[for(a : Property | c.allAttributes())]
   
    private [a.type.name/] [a.name/];
[/for]
 [/if]

    public [className/]() {
    }

 public [className/]([c.getEntityName()/] entity) {
	   if (entity!=null){
    [if(c.isGeneralization())]
    [for(a : Property | c.getGeneralizationClass().allAttributes())]
        [if (a.existAttribute(c)=false)]
        this.[a.name/]=entity.[a.getter()/]();
        [/if]
    [/for]
    [/if]
    [for(a : Property | c.allAttributes())]
        this.[a.name/]=entity.[a.getter()/]();
	[/for]
       }
    }

    /**
     * Convierte un objeto [className/] a [c.getEntityName()/].
     *
     * @return Nueva objeto [c.getEntityName()/].
     * @generated
     */
    public [c.getEntityName()/] toEntity() {
        [c.getEntityName()/] entity = new [c.getEntityName()/]();
    [if(c.isGeneralization())]
    [for(a : Property | c.getGeneralizationClass().allAttributes())]
        [if (a.existAttribute(c)=false)]
        entity.[a.setter()/](this.[a.getter()/]());
        [/if]
    [/for]
    [/if]
	[for(a : Property | c.allAttributes())]
        entity.[a.setter()/](this.[a.getter()/]());
	[/for]
    return entity;
    }
[if(not c.isGeneralization())]
[for (a : Property | c.allAttributes())]
    
    public [a.type.name/] [a.getter()/]() {
        return [a.name/];
    }
  
    public void [a.setter()/]([a.type.name/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }

[/for]
[/if]
[if(c.isGeneralization())]
    [for( p : Property | c.excludeAttributes(c.getGeneralizationClass()))]
          
    public [p.type.name/] [p.getter()/]() {
        return [p.name/];
    }

    public void [p.setter()/]([p.type.name/] [p.name.toLower()/]) {
        this.[p.name/] = [p.name.toLower()/];
    }
        
    [/for]
[/if]
}
[/file]
[/template]

[template protected genBasicDTO(c : Class, path: String) {className : String = c.getBasicDTOName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/



package [c.getModel().baseGroup()/].dtos;
[for (a : Property | c.getRelationshipAttributes())]
[if (a.isOne2Many() or a.isMany2Many())]
import java.util.List;
import java.util.ArrayList;
[/if]
[/for]
import [c.getModel().baseGroup()/].dtos;
import javax.xml.bind.annotation.XmlRootElement;


@XmlRootElement
public class [className/] extends [c.getMinimumDTOName()/]{

[c.setDetailDTOAttributes()/]

public [className/]() {
        super();
    }

 public [className/]([c.getEntityName()/] entity) {
        super(entity);
        [for (a : Property | c.getReferences(true))]
        if (entity.[a.getter()/]()!=null){
        this.[a.name/] = new [a.getClass().getMinimumDTOName()/](entity.[a.getter()/]());
        }
        [/for]
        
    }

    public [c.getEntityName()/] toEntity() {
        [c.getEntityName()/] entity = super.toEntity();
[for (a : Property | c.getReferences(true))]
        if (this.[a.getter()/]()!=null){
        entity.[a.setter()/](this.[a.getter()/]().toEntity());
        }
[/for]
        return entity;
    }

[c.setDetailDTOGettersAndSetters()/]

}
[/file]
[/template]

[query public existAttribute(a : Property, cl : Class) : Boolean = 

cl.allAttributes()->select(a1 | a1.name=a.name)->notEmpty()
/]
[query public excludeAttributes(c : Class , cl : Class) : Set(Property) = 
c.allAttributes() - cl.allAttributes()

/]
