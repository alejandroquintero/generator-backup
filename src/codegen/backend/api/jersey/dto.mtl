[comment encoding = UTF-8 /]
[module dto('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainDTOs(c : Class, path : String)]
[let dtoPath : String = path.concat('dtos/')]
    [c.genMinimumDTO(dtoPath)/]
    [c.genBasicDTO(dtoPath)/]
[/let]
[/template]

[template protected genMinimumDTO(c : Class, path: String) {className : String = c.getMinimumDTOName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].dtos.minimum;

import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;


@XmlRootElement
public class [className/] [if(c.isGeneralization())] extends [c.getGeneralizationClass().getMinimumDTOName()/][/if] implements Serializable{


[if(c.isGeneralization())]
[for( p : Property | c.excludeAttributes(c.getGeneralizationClass()))]
private [p.type.name/] [p.name/];
[/for]
[/if]

[if(not c.isGeneralization())]
[for(a : Property | c.allAttributes())]
   
    private [a.type.name/] [a.name/];
[/for]
 [/if]

    public [className/]() {
    }
[if(not c.isGeneralization())]
[for (a : Property | c.allAttributes())]
    
    public [a.type.name/] [a.getter()/]() {
        return [a.name/];
    }
  
    public void [a.setter()/]([a.type.name/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }

[/for]
[/if]
[if(c.isGeneralization())]
    [for( p : Property | c.excludeAttributes(c.getGeneralizationClass()))]
          
    public [p.type.name/] [p.getter()/]() {
        return [p.name/];
    }

    public void [p.setter()/]([p.type.name/] [p.name.toLower()/]) {
        this.[p.name/] = [p.name.toLower()/];
    }
        
    [/for]
[/if]
}
[/file]
[/template]

[template protected genBasicDTO(c : Class, path: String) {className : String = c.getBasicDTOName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].dtos.detail;

import [c.getModel().baseGroup()/].dtos.minimum.*;
import javax.xml.bind.annotation.XmlRootElement;


@XmlRootElement
public class [className/] extends [c.getMinimumDTOName()/]{


[for (a : Property | c.getRelationshipAttributes())] 
========
[a.name/] name
[a.getUpper()/] upper
[a.isNavigable()/] is navigable
[a.isMany2One()/] is many to one
[a.isOne2Many()/] is one to many
[a.isMany2Many()/] is many to many
[a.isOne2One()/] is one to one
========= 

[if (a.getUpper() = 1)]
    [if (not a.isComposite())][/if]
    private [a.getClass().getMinimumDTOName()/] [a.name/];
[/if]
[/for]

    public [className/]() {
        super();
    }

[for (a : Property | c.getReferences(true))]
=============
  [a.name/]
==============
    public [a.getClass().getMinimumDTOName()/] [a.getter()/]() {
        return [a.name/];
    }

  
    public void [a.setter()/]([a.getClass().getMinimumDTOName()/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }

[/for]
}
[/file]
[/template]

[query public existAttribute(a : Property, cl : Class) : Boolean = 

cl.allAttributes()->select(a1 | a1.name=a.name)->notEmpty()
/]
[query public excludeAttributes(c : Class , cl : Class) : Set(Property) = 
c.allAttributes() - cl.allAttributes()

/]
