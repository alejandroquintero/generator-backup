[comment encoding = UTF-8 /]
[module postmanTest('http://www.eclipse.org/uml2/5.0.0/UML') extends backend::api::jersey::services ]
[import ::utils /]

[template public mainPostman(c : Class, path : String)]
[let genPath : String = path.concat('tests/postman/')]
    [c.genPostmanTests(genPath)/]
[/let]
[/template]

[template private genPostmanTests(c : Class, path : String) {className : String = c.getTestName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].tests.postman;

import co.edu.uniandes.csw.postman.tests.PostmanTestBuilder;
import [c.getModel().baseGroup()/].resources.[c.getJaxRsName()/];
import java.io.File;
import java.io.IOException;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/*
 * Testing URI: [c.getFullURI()/]
 */
@RunWith(Arquillian.class)
public class [className/] {
 

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class,"[c.getModel().getApiArtifactId()/].war")
                // Se agrega las dependencias
                .addAsLibraries(Maven.resolver().loadPomFromFile("pom.xml")
                        .importRuntimeDependencies().resolve()
                        .withTransitivity().asFile())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                .addPackage("co.edu.uniandes.csw.auth.properties")
                // El archivo que contiene la configuracion a la base de datos.
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo beans.xml es necesario para injeccion de dependencias.
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
    }
   @Test 
    public void postman() throws IOException {
       PostmanTestBuilder tp = new PostmanTestBuilder();
        tp.setTestWithLogin("postman_collection[c.getPostmanCollectionName()/]","postman_env");
        String desiredResult="0";
       if( tp.getAssertions_failed() != null)
          Assert.assertEquals(desiredResult,tp.getAssertions_failed());
       if( tp.getIterations_failed() != null)
           Assert.assertEquals(desiredResult,tp.getIterations_failed());
       if ( tp.getPrerequest_scripts_failed() != null)
           Assert.assertEquals(desiredResult,tp.getIterations_failed());
       if( tp.getRequests_failed() != null)
            Assert.assertEquals(desiredResult,tp.getRequests_failed());
       if( tp.getTest_scripts_failed() != null)
            Assert.assertEquals(desiredResult,tp.getTest_scripts_failed());
       
    }
   
}
[/file]
[/template]

[template private getTestName(c : Class)]
[c.name/]IT
[/template]

[template private getTestName(a : Property)]
[a.getOwner().name/][a.name.toUpperFirst()/]IT
[/template]

[template private getFatherEntity(c : Class)]
father[c.name/]Entity
[/template]

[template private testPath(a : Property)]
[a.name.toLowerFirst()/]Path
[/template]

[template private testPath(c : Class)]
[c.getName()/]Path
[/template]

[template private getTestSuffix(a : Property)]
[a.name.toUpperFirst()/]IT
[/template]

[template private getResponseVarName(a : Property)]
[a.name.toLower()/]IT
[/template]

[template private getDTOName(a : Property)]
[a.getClass().getBasicDTOName()/]
[/template]

[template private testName(c : Class)]
[c.name.toLower().concat('IT')/]
[/template]